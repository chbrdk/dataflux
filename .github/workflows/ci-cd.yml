name: DataFlux CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Python dependencies
        run: |
          pip install flake8 black isort bandit safety
          pip install -r services/ingestion-service/requirements.txt
          pip install -r services/analysis-service/requirements.txt

      - name: Install Go dependencies
        run: |
          cd services/query-service
          go mod download

      - name: Install Node.js dependencies
        run: |
          cd services/mcp-server
          npm ci
          cd ../web-ui
          npm ci

      - name: Python Code Quality (Black)
        run: |
          black --check services/ingestion-service/src/
          black --check services/analysis-service/src/

      - name: Python Code Quality (Flake8)
        run: |
          flake8 services/ingestion-service/src/ --max-line-length=100
          flake8 services/analysis-service/src/ --max-line-length=100

      - name: Python Code Quality (isort)
        run: |
          isort --check-only services/ingestion-service/src/
          isort --check-only services/analysis-service/src/

      - name: Go Code Quality (gofmt)
        run: |
          cd services/query-service
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Go Code Quality (golint)
        run: |
          go install golang.org/x/lint/golint@latest
          cd services/query-service
          golint ./...

      - name: Go Code Quality (go vet)
        run: |
          cd services/query-service
          go vet ./...

      - name: TypeScript Code Quality (ESLint)
        run: |
          cd services/mcp-server
          npm run lint || true

      - name: Security Scan (Bandit)
        run: |
          bandit -r services/ingestion-service/src/ -f json -o bandit-report.json || true
          bandit -r services/analysis-service/src/ -f json -o bandit-report.json || true

      - name: Security Scan (Safety)
        run: |
          safety check --json --output safety-report.json || true

      - name: Security Scan (npm audit)
        run: |
          cd services/mcp-server
          npm audit --audit-level=moderate || true
          cd ../web-ui
          npm audit --audit-level=moderate || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        service: [ingestion-service, analysis-service, query-service, mcp-server]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        if: matrix.service == 'ingestion-service' || matrix.service == 'analysis-service'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Go
        if: matrix.service == 'query-service'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Set up Node.js
        if: matrix.service == 'mcp-server'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Python dependencies
        if: matrix.service == 'ingestion-service' || matrix.service == 'analysis-service'
        run: |
          pip install pytest pytest-cov pytest-asyncio pytest-mock
          pip install -r services/${{ matrix.service }}/requirements.txt

      - name: Install Go dependencies
        if: matrix.service == 'query-service'
        run: |
          cd services/query-service
          go mod download
          go get github.com/stretchr/testify/assert

      - name: Install Node.js dependencies
        if: matrix.service == 'mcp-server'
        run: |
          cd services/mcp-server
          npm ci

      - name: Run Python tests
        if: matrix.service == 'ingestion-service' || matrix.service == 'analysis-service'
        run: |
          cd services/${{ matrix.service }}
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

      - name: Run Go tests
        if: matrix.service == 'query-service'
        run: |
          cd services/query-service
          go test ./tests/... -v -coverprofile=coverage.out

      - name: Run TypeScript tests
        if: matrix.service == 'mcp-server'
        run: |
          cd services/mcp-server
          npm test

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage-${{ matrix.service }}
          path: |
            services/${{ matrix.service }}/coverage.xml
            services/${{ matrix.service }}/coverage.out
            services/${{ matrix.service }}/htmlcov/

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dataflux_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install dependencies
        run: |
          pip install pytest pytest-asyncio
          pip install -r services/ingestion-service/requirements.txt
          pip install -r services/analysis-service/requirements.txt
          cd services/query-service
          go mod download

      - name: Run database migrations
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d dataflux_test -f scripts/init-db.sql

      - name: Start services
        run: |
          cd services/ingestion-service
          python3 -c "import uvicorn; from src.main_simple import app; uvicorn.run(app, host='127.0.0.1', port=8002)" &
          cd ../query-service
          PORT=8003 go run cmd/main_simple.go &
          sleep 10

      - name: Run integration tests
        run: |
          make -f Makefile.test test-integration-api

      - name: Stop services
        run: |
          pkill -f "uvicorn.*main_simple" || true
          pkill -f "go run.*main_simple" || true

  # Build Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: integration-tests
    strategy:
      matrix:
        service: [ingestion-service, query-service, analysis-service, mcp-server, web-ui, api-gateway]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build-images
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Playwright
        run: |
          npm install --save-dev @playwright/test
          npx playwright install --with-deps

      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker/docker-compose.yml up -d postgres redis kafka minio
          sleep 30
          make migrate

      - name: Start application services
        run: |
          cd services/ingestion-service
          python3 -c "import uvicorn; from src.main_simple import app; uvicorn.run(app, host='127.0.0.1', port=8002)" &
          cd ../query-service
          PORT=8003 go run cmd/main_simple.go &
          cd ../web-ui
          npm run dev &
          sleep 15

      - name: Run E2E tests
        run: |
          npx playwright test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Stop services
        run: |
          pkill -f "uvicorn.*main_simple" || true
          pkill -f "go run.*main_simple" || true
          pkill -f "npm run dev" || true
          docker-compose -f docker/docker-compose.yml down

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build-images
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Artillery
        run: npm install -g artillery

      - name: Start services
        run: |
          docker-compose -f docker/docker-compose.yml up -d postgres redis kafka minio
          sleep 30
          make migrate
          cd services/ingestion-service
          python3 -c "import uvicorn; from src.main_simple import app; uvicorn.run(app, host='127.0.0.1', port=8002)" &
          cd ../query-service
          PORT=8003 go run cmd/main_simple.go &
          sleep 15

      - name: Run performance tests
        run: |
          artillery run tests/load/ingestion-load.yml
          artillery run tests/load/query-load.yml

      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-reports
          path: artillery-report.json

      - name: Stop services
        run: |
          pkill -f "uvicorn.*main_simple" || true
          pkill -f "go run.*main_simple" || true
          docker-compose -f docker/docker-compose.yml down

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build-images
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ingestion-service:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk security scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ingestion-service:latest
          args: --severity-threshold=high

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [e2e-tests, performance-tests, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add actual deployment commands here
          # kubectl apply -f k8s/staging/
          # helm upgrade --install dataflux-staging ./helm/dataflux

      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging..."
          # Add smoke test commands here

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e-tests, performance-tests, security-scan]
    if: github.event_name == 'release'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add actual deployment commands here
          # kubectl apply -f k8s/production/
          # helm upgrade --install dataflux-prod ./helm/dataflux

      - name: Run production health checks
        run: |
          echo "Running production health checks..."
          # Add health check commands here

  # Notification
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify on success
        if: ${{ needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success' }}
        run: |
          echo "Deployment successful!"
          # Add notification logic here (Slack, Discord, etc.)

      - name: Notify on failure
        if: ${{ needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure' }}
        run: |
          echo "Deployment failed!"
          # Add notification logic here