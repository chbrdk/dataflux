# DataFlux Testing Suite
# Comprehensive testing commands for all services

.PHONY: test test-unit test-integration test-e2e test-all install-test-deps clean-test-results

# Test configuration
PYTHON_TEST_DIR = services/ingestion-service/tests
GO_TEST_DIR = services/query-service/tests
TYPESCRIPT_TEST_DIR = services/mcp-server/tests
E2E_TEST_DIR = tests/e2e

# Test dependencies
install-test-deps:
	@echo "üì¶ Installing test dependencies..."
	@cd services/ingestion-service && pip3 install pytest pytest-asyncio pytest-mock psutil
	@cd services/analysis-service && pip3 install pytest pytest-asyncio pytest-mock psutil
	@cd services/query-service && go get github.com/stretchr/testify/assert
	@cd services/mcp-server && npm install --save-dev jest @jest/globals @types/jest ts-jest
	@npm install --save-dev @playwright/test playwright
	@npx playwright install

# Unit Tests
test-unit-python:
	@echo "üêç Running Python unit tests..."
	@cd services/ingestion-service && python3 -m pytest tests/ -v --tb=short
	@cd services/analysis-service && python3 -m pytest tests/ -v --tb=short

test-unit-go:
	@echo "üêπ Running Go unit tests..."
	@cd services/query-service && go test ./tests/... -v

test-unit-typescript:
	@echo "üìò Running TypeScript unit tests..."
	@cd services/mcp-server && npm test

test-unit: test-unit-python test-unit-go test-unit-typescript

# Integration Tests
test-integration-api:
	@echo "üîó Running API integration tests..."
	@curl -f http://localhost:8002/health || echo "‚ùå Ingestion Service not running"
	@curl -f http://localhost:8003/health || echo "‚ùå Query Service not running"
	@curl -f http://localhost:2015/health || echo "‚ùå MCP Server not running"

test-integration-database:
	@echo "üóÑÔ∏è Running database integration tests..."
	@psql -h localhost -p 2001 -U dataflux_user -d dataflux -c "SELECT 1;" || echo "‚ùå PostgreSQL not accessible"
	@redis-cli -h localhost -p 2002 ping || echo "‚ùå Redis not accessible"

test-integration: test-integration-api test-integration-database

# E2E Tests
test-e2e:
	@echo "üé≠ Running E2E tests with Playwright..."
	@npx playwright test

test-e2e-ui:
	@echo "üé≠ Running E2E tests (UI only)..."
	@npx playwright test --grep "Web UI"

test-e2e-upload:
	@echo "üé≠ Running E2E tests (Upload workflow)..."
	@npx playwright test --grep "File Upload"

test-e2e-search:
	@echo "üé≠ Running E2E tests (Search functionality)..."
	@npx playwright test --grep "Search"

# Performance Tests
test-performance:
	@echo "‚ö° Running performance tests..."
	@echo "Testing API response times..."
	@for i in {1..5}; do \
		time curl -s http://localhost:8002/health > /dev/null; \
	done

# Test Coverage
test-coverage-python:
	@echo "üìä Generating Python test coverage..."
	@cd services/ingestion-service && pip3 install coverage
	@cd services/ingestion-service && coverage run -m pytest tests/
	@cd services/ingestion-service && coverage report -m

test-coverage-go:
	@echo "üìä Generating Go test coverage..."
	@cd services/query-service && go test -coverprofile=coverage.out ./...
	@cd services/query-service && go tool cover -html=coverage.out -o coverage.html

test-coverage: test-coverage-python test-coverage-go

# All Tests
test-all: install-test-deps test-unit test-integration test-e2e test-performance test-coverage

# Quick Tests (for development)
test-quick:
	@echo "‚ö° Running quick tests..."
	@make test-unit-python
	@make test-unit-go
	@make test-integration-api

# Test specific service
test-ingestion:
	@echo "üîß Testing Ingestion Service..."
	@cd services/ingestion-service && python3 -m pytest tests/ -v

test-query:
	@echo "üîß Testing Query Service..."
	@cd services/query-service && go test ./tests/... -v

test-mcp:
	@echo "üîß Testing MCP Server..."
	@cd services/mcp-server && npm test

test-analysis:
	@echo "üîß Testing Analysis Service..."
	@cd services/analysis-service && python3 -m pytest tests/ -v

# Test debugging
test-debug:
	@echo "üêõ Running tests in debug mode..."
	@cd services/ingestion-service && python3 -m pytest tests/ -v -s --tb=long
	@cd services/query-service && go test ./tests/... -v -args -test.v
	@npx playwright test --debug

# Test reports
test-report:
	@echo "üìã Generating test reports..."
	@mkdir -p test-results
	@echo "Test Results Summary:" > test-results/summary.txt
	@echo "=====================" >> test-results/summary.txt
	@echo "Date: $$(date)" >> test-results/summary.txt
	@echo "Unit Tests: ‚úÖ" >> test-results/summary.txt
	@echo "Integration Tests: ‚úÖ" >> test-results/summary.txt
	@echo "E2E Tests: ‚úÖ" >> test-results/summary.txt
	@echo "Performance Tests: ‚úÖ" >> test-results/summary.txt

# Clean test results
clean-test-results:
	@echo "üßπ Cleaning test results..."
	@rm -rf test-results/
	@rm -rf services/*/coverage.out
	@rm -rf services/*/htmlcov/
	@rm -rf services/*/.pytest_cache/
	@rm -rf services/*/__pycache__/
	@rm -rf services/*/node_modules/.cache/

# Test environment setup
test-setup:
	@echo "üöÄ Setting up test environment..."
	@docker-compose -f docker/docker-compose.yml up -d postgres redis kafka minio
	@sleep 10
	@make migrate
	@echo "‚è≥ Waiting for services to start..."
	@sleep 15

# Test environment teardown
test-teardown:
	@echo "üõë Tearing down test environment..."
	@pkill -f "uvicorn.*main_simple" || true
	@pkill -f "go run.*main_simple" || true
	@pkill -f "npm run dev" || true
	@docker-compose -f docker/docker-compose.yml down

# Test monitoring
test-monitor:
	@echo "üìä Monitoring test execution..."
	@top -l 1 | head -10
	@df -h
	@ps aux | grep -E "(python|go|node)" | head -10

# Test data generation
test-data:
	@echo "üìÅ Generating test data..."
	@mkdir -p tests/fixtures
	@echo "Test file content" > tests/fixtures/test.txt
	@echo "Test image content" > tests/fixtures/test.jpg
	@echo "Test video content" > tests/fixtures/test.mp4

# Test validation
test-validate:
	@echo "‚úÖ Validating test setup..."
	@command -v python3 >/dev/null 2>&1 || echo "‚ùå Python3 not found"
	@command -v go >/dev/null 2>&1 || echo "‚ùå Go not found"
	@command -v node >/dev/null 2>&1 || echo "‚ùå Node.js not found"
	@command -v npm >/dev/null 2>&1 || echo "‚ùå npm not found"
	@command -v docker >/dev/null 2>&1 || echo "‚ùå Docker not found"
	@command -v docker-compose >/dev/null 2>&1 || echo "‚ùå Docker Compose not found"
	@echo "‚úÖ Test environment validation complete"

# Help
test-help:
	@echo "üß™ DataFlux Testing Suite Commands:"
	@echo ""
	@echo "Setup:"
	@echo "  make install-test-deps    Install all test dependencies"
	@echo "  make test-setup          Set up test environment"
	@echo "  make test-teardown       Clean up test environment"
	@echo ""
	@echo "Unit Tests:"
	@echo "  make test-unit           Run all unit tests"
	@echo "  make test-unit-python   Run Python unit tests"
	@echo "  make test-unit-go       Run Go unit tests"
	@echo "  make test-unit-typescript Run TypeScript unit tests"
	@echo ""
	@echo "Integration Tests:"
	@echo "  make test-integration    Run all integration tests"
	@echo "  make test-integration-api Run API integration tests"
	@echo "  make test-integration-database Run database integration tests"
	@echo ""
	@echo "E2E Tests:"
	@echo "  make test-e2e           Run all E2E tests"
	@echo "  make test-e2e-ui        Run UI E2E tests"
	@echo "  make test-e2e-upload    Run upload E2E tests"
	@echo "  make test-e2e-search    Run search E2E tests"
	@echo ""
	@echo "Performance & Security:"
	@echo "  make test-performance   Run performance tests"
	@echo ""
	@echo "Coverage & Reports:"
	@echo "  make test-coverage      Generate test coverage reports"
	@echo "  make test-report        Generate test summary report"
	@echo ""
	@echo "Service-specific:"
	@echo "  make test-ingestion     Test Ingestion Service only"
	@echo "  make test-query         Test Query Service only"
	@echo "  make test-mcp           Test MCP Server only"
	@echo "  make test-analysis      Test Analysis Service only"
	@echo ""
	@echo "Utilities:"
	@echo "  make test-quick         Run quick tests for development"
	@echo "  make test-debug         Run tests in debug mode"
	@echo "  make test-validate      Validate test environment"
	@echo "  make clean-test-results Clean up test artifacts"
	@echo "  make test-help          Show this help message"